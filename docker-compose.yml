version: "3.8"

services:
  # MongoDB database
  mongodb:
    image: mongo:6.0
    container_name: sambhram-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: sambhram_library
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./server/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - sambhram-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: sambhram-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sambhram-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: sambhram-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/sambhram_library?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    networks:
      - sambhram-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-builder
    container_name: sambhram-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:5000/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - sambhram-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: sambhram-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - sambhram-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  sambhram-network:
    driver: bridge
